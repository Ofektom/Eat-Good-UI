import axios from 'axios';

const API_BASE_URL = '/api/v1/auth';

const AuthService = {
    signup: async (userData) => {
        try {
          const response = await axios.post(`${API_BASE_URL}/customer-sign-up`, userData, {
            headers: {
              'Content-Type': 'application/json',
            },
          });
          return response.data;
        } catch (error) {
          throw error.response ? error.response.data : error.message;
        }
      },
    
      signupVendor: async (vendorData) => {
        try {
          const response = await axios.post(`${API_BASE_URL}/vendor-sign-up`, vendorData, {
            headers: {
              'Content-Type': 'application/json',
            },
          });
          return response.data;
        } catch (error) {
          throw error.response ? error.response.data : error.message;
        }
      },
    
      login: async (loginData) => {
        try {
          const response = await axios.post(`${API_BASE_URL}/login`, loginData, {
            headers: {
              'Content-Type': 'application/json',
            },
          });
          localStorage.setItem('token', response.data);
          return response.data;
        } catch (error) {
          throw error.response ? error.response.data : error.message;
        }
      },
    
      logout: async () => {
        try {
          const response = await axios.post(`${API_BASE_URL}/logout`, null, {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`,
            },
          });
          localStorage.removeItem('token');
          return response.data;
        } catch (error) {
          throw error.response ? error.response.data : error.message;
        }
      },
    
      resetPassword: async (emailData) => {
        try {
          const response = await axios.post(`${API_BASE_URL}/resetPassword`, emailData, {
            headers: {
              'Content-Type': 'application/json',
            },
          });
          return response.data;
        } catch (error) {
          throw error.response ? error.response.data : error.message;
        }
      },
    
      resendVerificationToken: async (oldToken) => {
        try {
          const response = await axios.get(`${API_BASE_URL}/resendVerifyToken?token=${oldToken}`, {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`,
            },
          });
          return response.data;
        } catch (error) {
          throw error.response ? error.response.data : error.message;
        }
      },
    
      // Add other authentication-related methods here
    
      isAuthenticated: () => {
        return !!localStorage.getItem('token');
      },
    };
    

export default AuthService;